name: 🚀 Deploy DigiCats

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Smart Contract Testing
  contracts:
    name: 🔧 Smart Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run contract tests
        run: npm run test

      - name: 📊 Generate coverage report
        run: npm run coverage

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  # Frontend Testing
  frontend:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📥 Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🧪 Run frontend tests
        working-directory: ./frontend
        run: npm run test -- --coverage --watchAll=false

      - name: 🏗️ Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build/

  # Security Audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run security audit
        run: npm audit --audit-level=moderate

      - name: 🛡️ Run Slither analysis
        uses: crytic/slither-action@v0.3.0
        id: slither
        with:
          node-version: 18

  # Docker Build
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [frontend]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/DigiCats:latest
            ${{ secrets.DOCKER_USERNAME }}/DigiCats:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Production
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [contracts, frontend, security, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./build

      - name: 🌐 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod'

      - name: 📝 Create deployment status
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: 'https://DigiCats-nft-game.vercel.app',
              description: 'Deployment completed successfully'
            });

  # Notify on Success
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: 🎉 Success notification
        if: needs.deploy.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🎉 DigiCats deployed successfully! 🐱'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: 🚨 Failure notification
        if: needs.deploy.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '🚨 DigiCats deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
